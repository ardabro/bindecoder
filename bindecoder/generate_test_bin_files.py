#!/usr/bin/env python3
# _*_ coding,utf-8 _*_
############################################################################################################################################

DATASETS = \
    {
        "endian_test": bytes(
            [
                # little endian:
                0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,    # 64bit uint
                0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,    # 64bit int == -7FFFFFFFFFFFFFFF
                0x01,0x02,0x03,0x04,                        # 32bit uint
                0x01,0x00,0x00,0x80,                        # 32bit int == -7FFFFFFF
                0x01,0x02,                                  # 16bit uint
                0x01,0x80,                                  # 16bit int == -7FFF
                0xDB,0x0F,0x49,0x40,                        # 32bit float == PI
                0x18,0x2D,0x44,0x54,0xFB,0x21,0x09,0x40,    # 64bit float == PI
                0x3d,0x54,0x54,0x63,                        # 32bit unix time: 2022-10-22 20:36:13 UTC (1666470973)
                0x00,0x00,0x48,0x0F,0x15,0xD5,0xD8,0x41,    # 64bit float unix time: 2022-10-22 20:36:13.125 UTC (1666470973.125)

                # big endian:
                0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01,    # 64bit uint
                0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,    # 64bit int == -7FFFFFFFFFFFFFFF
                0x04,0x03,0x02,0x01,                        # 32bit uint
                0x80,0x00,0x00,0x01,                        # 32bit int == -7FFFFFFF
                0x02,0x01,                                  # 16bit uint
                0x80,0x01,                                  # 16bit int == -7FFF
                0x40,0x49,0x0F,0xDB,                        # 32bit float == PI
                0x40,0x09,0x21,0xFB,0x54,0x44,0x2D,0x18,    # 64bit float == PI
                0x63,0x54,0x54,0x3d,                        # 32bit int unix time: 2022-10-22 20:36:13 UTC     (1666470973)
                0x41,0xD8,0xD5,0x15,0x0F,0x48,0x00,0x00,    # 64bit float unix time: 2022-10-22 20:36:13.125 UTC (1666470973.125)
            ]),


        "header_and_points": bytes(
            list(b"EYECATCHER") +
            [
                6,0,0,0,                    # 6 points
                0x01, 0x01, 0x11, 0x11,
                0x02, 0x02, 0x22, 0x22,
                0x03, 0x03, 0x33, 0x33,
                0x04, 0x04, 0x44, 0x44,
                0x05, 0x05, 0x55, 0x55,
                0x06, 0x06, 0x66, 0x66,
            ] +
            list(b"FOOTER")),


        "list_of_lists": bytes(
            [
                5, 0,                   # number of lists, little endian
                3,  0x41,0x41,0x41,0x41,0x31,  0xAA,0xAA,  0x61,0x54,0x54,0x3d, 0x00, 0x01, 0x02,
                0,  0x42,0x42,0x42,0x42,0x32,  0xBB,0xBB,  0x62,0x54,0x54,0x3d,
                1,  0x43,0x43,0x43,0x43,0x33,  0xCC,0xCC,  0x63,0x54,0x54,0x3d, 0x10,

                13, 0x44,0x44,0x44,0x44,0x34,  0xDD,0xDD,  0x64,0x54,0x54,0x3d,
                0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0x31, 0x32,

                6,  0x45,0x45,0x45,0x45,0x35,  0xEE,0xEE,  0x65,0x54,0x54,0x3d,
                0x30, 0x31, 0x32, 0x33, 0x34, 0x35
            ] +
            list(b"FOOTER")),


        "var_integers": bytes(
            [
                8,              # 8 values
                0x00,                                                   # 0x00               8bit
                0xFC,                                                   # 0xFC               8bit   (<0xFD)
                0xFD, 0xFD, 0x00,                                       # 0xFD               24bit: 0xFD prefix + 16bit: 0x00FD
                0xFD, 0xFF, 0xFF,                                       # 0xFFFF             24bit: 0xFD prefix + 16bit: 0xFFFF
                0xFE, 0x00, 0x00, 0x01, 0x00,                           # 0x10000            32bit: 0xFE prefix + 32bit: 0x10000
                0xFE, 0xFF, 0xFF, 0xFF, 0xFF,                           # 0xFFFFFFFF         32bit: 0xFE prefix + 32bit: 0xFFFFFFFF
                0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,   # 0x100000000        64bit: 0xFF prefix + 64bit: 0x100000000
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF    # 0xFFFFFFFFFFFFFFFF 64bit: 0xFF prefix + 64bit: 16 Fs
            ] + list(b"FOOTER")),


        "var_integers_with_extended_sizes": bytes(
            [
                8,              # 8 values
                0x00,                                     0,0,0,        # 0x00               8bit
                0xFC,                                     0,0,0,        # 0xFC               8bit   (<0xFD)
                0xFD, 0xFD, 0x00,                         0,            # 0xFD               24bit: 0xFD prefix + 16bit: 0x00FD
                0xFD, 0xFF, 0xFF,                         0,            # 0xFFFF             24bit: 0xFD prefix + 16bit: 0xFFFF
                0xFE, 0x00, 0x00, 0x01, 0x00,             0,0,0,        # 0x10000            32bit: 0xFE prefix + 32bit: 0x10000
                0xFE, 0xFF, 0xFF, 0xFF, 0xFF,             0,0,0,        # 0xFFFFFFFF         32bit: 0xFE prefix + 32bit: 0xFFFFFFFF
                0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,   # 0x100000000        64bit: 0xFF prefix + 64bit: 0x100000000
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF    # 0xFFFFFFFFFFFFFFFF 64bit: 0xFF prefix + 64bit: 16 Fs
            ] + list(b"FOOTER")),


        "struct_in_struct": bytes(
            list(b"HEADER") +
            [
                11,12,
                21,22,23
            ] + list(b"FOOTER")),


        "union_in_union_nightmare":  bytes(
            [
                3,      # the number of outer union instances
                0, 0,   0x10, 0x11,                                         0,0,0,0,0,0,0,0,0,      # chameleon.XY
                0, 2,   0xFF, 0xFF, 0x00, 0x80, 0x01, 0x00,                 0,0,0,0,0,              # chameleon.INT_ARR

                1,                                                                                  # VARINT3 (3 varint instances)
                0xFD, 0x11, 0x11,
                0xFF, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
                0xFE, 0x33, 0x33, 0x33, 0x33,                               0,0                     # fill to the total length of 20 bytes

            ] + list(b"FOOTER")),

        "xy_points":   bytes(
            list(b"XY_F") +
            [
                0xAA,0x55,              # checksum
                0xA3,0x75,0xD5,0x63,    # timestamp
                0x04,0x00,0x00,0x00,    # number of records
                0x01,0x00,0x0B,0x00,
                0x02,0x00,0x0C,0x00,
                0x03,0x00,0x0D,0x00,
                0x04,0x00,0x0E,0x00
            ]),

        "xyz_points":   bytes(
            list(b"XYZF") +
            [
                0xAA,0x55,                      # checksum
                0xA3,0x75,0xD5,0x63,            # timestamp
                0x03,0x00,0x00,0x00,            # number of records
                0x01,0x00,0x0B,0x00,0x65,0x00,
                0x02,0x00,0x0C,0x00,0x66,0x00,
                0x03,0x00,0x0D,0x00,0x67,0x00
            ])
    }


if __name__=='__main__':
    for name, data in DATASETS.items():
        fname = name+".bin"
        print(fname + "...",end="")
        with open(fname, "wb") as f:
            f.write(data)
        print(" done")

