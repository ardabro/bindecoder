
{
    "DEFAULTS":
    {
        // for "*_format" specifiers syntax see https://docs.python.org/3/library/string.html#formatspec
        // for timestamp format syntax see https://docs.python.org/3/library/time.html?highlight=strftime#time.strftime
        // for available character encodings see https://docs.python.org/3/library/codecs.html#standard-encodings

        "default_array_separator":" ",
        "default_endian":"system",                      // little, big, system
        "default_integer_format":"0x{:x}",              // for int and uint of any size
        "default_integer_size":4,                       // default size in bytes for int and uint
        "default_timestamp_format":"%Y-%m-%d %H:%M:%S", // default timestamp format
        "default_timezone_offset":3600,                 // timezone offset for time presentation in seconds; null == local timezone
        "default_integral_timestamp_size":4,            // default size in bytes for integral timestamp (unix time)
        "default_float_format":"{:f}",                  // default floating point number format
        "default_stop_str_on_zero":true,                // present strings up-to 1st zero character by default (skip remaining bytes)
        "default_float_size":4,                         // default size of floating point number; only 4 and 8 values allowed (IEEE-754)
        "default_character_encoding":"ascii",           // default character encoding
        "default_struct_field_placement":"normal"       // normal, aligned, oneline; it specifies how simple (non-structural, no-array)
                                                        //   structure fields are presented;
                                                        //   normal: one per line, "label: value", without any alignment
                                                        //   aligned: one per line but both: labels and values aligned to the same column
                                                        //   oneline: "label1: value1;  label2: value2"... all in the same line
    },

    // Fundamental, predefined data types (see format_spec.md for more comprehensive guide):
    //   int - signed integer
    //   uint - unsigned integer
    //   ts - integral timestamp (unix time); minimum 4 bytes, may be "shifted" i.e. multiplied by unsigned integer factor
    //   fts - floating point timestamp (unix time); the only acceptable size value is 8 (bytes)
    //   char - a string of characters; may have specified length in characters (besides the size in bytes)
    //   struct - a structure consisting of attributes; many containment levels allowed
    //   union - a set of variants; one of them at a time is chosen dynamically with user-defined formula
    //   skip - a special kind of field which orders the processor to simply skip the specified number of bytes;

    "TYPEDEFS":
    {
        // Derived field types defined for convenience:

        "uint8" :{"base":"uint", "size":1, "format":"0x{:02x}"},
        "uint16":{"base":"uint", "size":2, "format":"0x{:04x}"},
        "uint32":{"base":"uint", "size":4, "format":"0x{:08x}"},
        "uint64":{"base":"uint", "size":8, "format":"0x{:016x}"},

        "int8"  :{"base":"int",  "size":1, "format":"{:+4d}"},
        "int16" :{"base":"int",  "size":2, "format":"{:+6d}"},
        "int32" :{"base":"int",  "size":4, "format":"{:+11d}"},
        "int64" :{"base":"int",  "size":8, "format":"{:+20d}"},

        "utc_time32":{"base":"ts", "size":4, "multiplier":1, "tzoffs":0},
        "loc_time32":{"base":"utc_time32", "tzoffs":null},

        "float32":{"base":"float", "size":4, "format":"{:f}"},
        "float64":{"base":"float", "size":8, "format":"{:f}"},

        // A couple of trivial structure definitions for raw data dumps:

        "uint8_dump":
        {
            "fields":
            {
                "data": {"base":"uint8", "count":1000000000000, "wrap_at":32}
            }
        },

        "byte_dump":"uint8_dump",

        "uint16_dump":
        {
            "fields":
            {
                "data": {"base":"uint16", "count":500000000000, "wrap_at":16}
            }
        },

        "word_dump":"uint16_dump",

        "uint32_dump":
        {
            "fields":
            {
                "data": {"base":"uint32", "count":250000000000, "wrap_at":8}
            }
        },

        "dword_dump":"uint32_dump"
    }
}
